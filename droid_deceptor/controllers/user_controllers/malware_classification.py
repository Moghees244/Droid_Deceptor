import pickle
import numpy as np
from droid_deceptor.config import Paths

def prepare_input(vector):
    input_values = []

    for _, value in vector.items():
        if value == 0 or value == 1:
            input_values.append(value)
    
    input1D = np.array(input_values)
    input2D = input1D.reshape(1, -1)
    return input2D


def decision_tree_classifier(apk_vector):
    decision_tree = pickle.load(open(Paths.DECISION_TREE_PATH, 'rb'))
    return decision_tree.predict(apk_vector), decision_tree.predict_proba(apk_vector)

def knn_classifier(apk_vector):
    knn = pickle.load(open(Paths.KNN_PATH, 'rb'))
    return knn.predict(apk_vector), knn.predict_proba(apk_vector)

def logistic_regression_classifier(apk_vector):
    logistic_regression = pickle.load(open(Paths.LOGISTIC_REGRESSION_PATH, 'rb'))
    return logistic_regression.predict(apk_vector), logistic_regression.predict_proba(apk_vector)

def random_forests_classifier(apk_vector):
    random_forests = pickle.load(open(Paths.RANDOM_FORESTS_PATH, 'rb'))
    return random_forests.predict(apk_vector),random_forests.predict_proba(apk_vector)

def svm_classifier(apk_vector):
    svm = pickle.load(open(Paths.SVM_PATH, 'rb'))
    return svm.predict(apk_vector), svm.predict_proba(apk_vector)


def malware_classifier(apk_vector):
    results = {}

    results['Decision Trees'] = decision_tree_classifier(apk_vector)
    results['kNN'] = knn_classifier(apk_vector)
    results['Logistic Regression'] = logistic_regression_classifier(apk_vector)
    results['Random Forests'] = random_forests_classifier(apk_vector)
    results['SVM'] = svm_classifier(apk_vector)

    return results
